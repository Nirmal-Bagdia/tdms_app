{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nirmal.Bagdia\\\\ppmcli\\\\src\\\\components\\\\layout\\\\Sidebar.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nconst CANCEL_DISTANCE_ON_SCROLL = 20;\nconst defaultStyles = {\n  root: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    overflow: \"hidden\"\n  },\n  sidebar: {\n    zIndex: 2,\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    transition: \"transform .3s ease-out\",\n    WebkitTransition: \"-webkit-transform .3s ease-out\",\n    willChange: \"transform\",\n    overflowY: \"auto\"\n  },\n  content: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    overflowY: \"auto\",\n    WebkitOverflowScrolling: \"touch\",\n    transition: \"left .3s ease-out, right .3s ease-out\"\n  },\n  overlay: {\n    zIndex: 1,\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    opacity: 0,\n    visibility: \"hidden\",\n    transition: \"opacity .3s ease-out, visibility .3s ease-out\",\n    backgroundColor: \"rgba(0,0,0,.3)\"\n  },\n  dragHandle: {\n    zIndex: 1,\n    position: \"fixed\",\n    top: 0,\n    bottom: 0\n  }\n};\n\nclass Sidebar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // the detected width of the sidebar in pixels\n      sidebarWidth: props.defaultSidebarWidth,\n      // keep track of touching params\n      touchIdentifier: null,\n      touchStartX: null,\n      touchCurrentX: null,\n      // if touch is supported by the browser\n      dragSupported: false\n    };\n    this.overlayClicked = this.overlayClicked.bind(this);\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.onTouchMove = this.onTouchMove.bind(this);\n    this.onTouchEnd = this.onTouchEnd.bind(this);\n    this.onScroll = this.onScroll.bind(this);\n    this.saveSidebarRef = this.saveSidebarRef.bind(this);\n  }\n\n  componentDidMount() {\n    const isIos = /iPad|iPhone|iPod/.test(navigator ? navigator.userAgent : \"\");\n    this.setState({\n      dragSupported: typeof window === \"object\" && \"ontouchstart\" in window && !isIos\n    });\n    this.saveSidebarWidth();\n  }\n\n  componentDidUpdate() {\n    // filter out the updates when we're touching\n    if (!this.isTouching()) {\n      this.saveSidebarWidth();\n    }\n  }\n\n  onTouchStart(ev) {\n    // filter out if a user starts swiping with a second finger\n    if (!this.isTouching()) {\n      const touch = ev.targetTouches[0];\n      this.setState({\n        touchIdentifier: touch.identifier,\n        touchStartX: touch.clientX,\n        touchCurrentX: touch.clientX\n      });\n    }\n  }\n\n  onTouchMove(ev) {\n    if (this.isTouching()) {\n      for (let ind = 0; ind < ev.targetTouches.length; ind++) {\n        // we only care about the finger that we are tracking\n        if (ev.targetTouches[ind].identifier === this.state.touchIdentifier) {\n          this.setState({\n            touchCurrentX: ev.targetTouches[ind].clientX\n          });\n          break;\n        }\n      }\n    }\n  }\n\n  onTouchEnd() {\n    if (this.isTouching()) {\n      // trigger a change to open if sidebar has been dragged beyond dragToggleDistance\n      const touchWidth = this.touchSidebarWidth();\n\n      if (this.props.open && touchWidth < this.state.sidebarWidth - this.props.dragToggleDistance || !this.props.open && touchWidth > this.props.dragToggleDistance) {\n        this.props.onSetOpen(!this.props.open);\n      }\n\n      this.setState({\n        touchIdentifier: null,\n        touchStartX: null,\n        touchCurrentX: null\n      });\n    }\n  } // This logic helps us prevents the user from sliding the sidebar horizontally\n  // while scrolling the sidebar vertically. When a scroll event comes in, we're\n  // cancelling the ongoing gesture if it did not move horizontally much.\n\n\n  onScroll() {\n    if (this.isTouching() && this.inCancelDistanceOnScroll()) {\n      this.setState({\n        touchIdentifier: null,\n        touchStartX: null,\n        touchCurrentX: null\n      });\n    }\n  } // True if the on going gesture X distance is less than the cancel distance\n\n\n  inCancelDistanceOnScroll() {\n    let cancelDistanceOnScroll;\n\n    if (this.props.pullRight) {\n      cancelDistanceOnScroll = Math.abs(this.state.touchCurrentX - this.state.touchStartX) < CANCEL_DISTANCE_ON_SCROLL;\n    } else {\n      cancelDistanceOnScroll = Math.abs(this.state.touchStartX - this.state.touchCurrentX) < CANCEL_DISTANCE_ON_SCROLL;\n    }\n\n    return cancelDistanceOnScroll;\n  }\n\n  isTouching() {\n    return this.state.touchIdentifier !== null;\n  }\n\n  overlayClicked() {\n    if (this.props.open) {\n      this.props.onSetOpen(false);\n    }\n  }\n\n  saveSidebarWidth() {\n    const width = this.sidebar.offsetWidth;\n\n    if (width !== this.state.sidebarWidth) {\n      this.setState({\n        sidebarWidth: width\n      });\n    }\n  }\n\n  saveSidebarRef(node) {\n    this.sidebar = node;\n  } // calculate the sidebarWidth based on current touch info\n\n\n  touchSidebarWidth() {\n    // if the sidebar is open and start point of drag is inside the sidebar\n    // we will only drag the distance they moved their finger\n    // otherwise we will move the sidebar to be below the finger.\n    if (this.props.pullRight) {\n      if (this.props.open && window.innerWidth - this.state.touchStartX < this.state.sidebarWidth) {\n        if (this.state.touchCurrentX > this.state.touchStartX) {\n          return this.state.sidebarWidth + this.state.touchStartX - this.state.touchCurrentX;\n        }\n\n        return this.state.sidebarWidth;\n      }\n\n      return Math.min(window.innerWidth - this.state.touchCurrentX, this.state.sidebarWidth);\n    }\n\n    if (this.props.open && this.state.touchStartX < this.state.sidebarWidth) {\n      if (this.state.touchCurrentX > this.state.touchStartX) {\n        return this.state.sidebarWidth;\n      }\n\n      return this.state.sidebarWidth - this.state.touchStartX + this.state.touchCurrentX;\n    }\n\n    return Math.min(this.state.touchCurrentX, this.state.sidebarWidth);\n  }\n\n  render() {\n    const sidebarStyle = { ...defaultStyles.sidebar,\n      ...this.props.styles.sidebar\n    };\n    const contentStyle = { ...defaultStyles.content,\n      ...this.props.styles.content\n    };\n    const overlayStyle = { ...defaultStyles.overlay,\n      ...this.props.styles.overlay\n    };\n    const useTouch = this.state.dragSupported && this.props.touch;\n    const isTouching = this.isTouching();\n    const rootProps = {\n      className: this.props.rootClassName,\n      style: { ...defaultStyles.root,\n        ...this.props.styles.root\n      },\n      role: \"navigation\",\n      id: this.props.rootId\n    };\n    let dragHandle;\n    const hasBoxShadow = this.props.shadow && (isTouching || this.props.open || this.props.docked); // sidebarStyle right/left\n\n    if (this.props.pullRight) {\n      sidebarStyle.right = 0;\n      sidebarStyle.transform = \"translateX(100%)\";\n      sidebarStyle.WebkitTransform = \"translateX(100%)\";\n\n      if (hasBoxShadow) {\n        sidebarStyle.boxShadow = \"-2px 2px 4px rgba(0, 0, 0, 0.15)\";\n      }\n    } else {\n      sidebarStyle.left = 0;\n      sidebarStyle.transform = \"translateX(-100%)\";\n      sidebarStyle.WebkitTransform = \"translateX(-100%)\";\n\n      if (hasBoxShadow) {\n        sidebarStyle.boxShadow = \"2px 2px 4px rgba(0, 0, 0, 0.15)\";\n      }\n    }\n\n    if (isTouching) {\n      const percentage = this.touchSidebarWidth() / this.state.sidebarWidth; // slide open to what we dragged\n\n      if (this.props.pullRight) {\n        sidebarStyle.transform = `translateX(${(1 - percentage) * 100}%)`;\n        sidebarStyle.WebkitTransform = `translateX(${(1 - percentage) * 100}%)`;\n      } else {\n        sidebarStyle.transform = `translateX(-${(1 - percentage) * 100}%)`;\n        sidebarStyle.WebkitTransform = `translateX(-${(1 - percentage) * 100}%)`;\n      } // fade overlay to match distance of drag\n\n\n      overlayStyle.opacity = percentage;\n      overlayStyle.visibility = \"visible\";\n    } else if (this.props.docked) {\n      // show sidebar\n      if (this.state.sidebarWidth !== 0) {\n        sidebarStyle.transform = `translateX(0%)`;\n        sidebarStyle.WebkitTransform = `translateX(0%)`;\n      } // make space on the left/right side of the content for the sidebar\n\n\n      if (this.props.pullRight) {\n        contentStyle.right = `${this.state.sidebarWidth}px`;\n      } else {\n        contentStyle.left = `${this.state.sidebarWidth}px`;\n      }\n    } else if (this.props.open) {\n      // slide open sidebar\n      sidebarStyle.transform = `translateX(0%)`;\n      sidebarStyle.WebkitTransform = `translateX(0%)`; // show overlay\n\n      overlayStyle.opacity = 1;\n      overlayStyle.visibility = \"visible\";\n    }\n\n    if (isTouching || !this.props.transitions) {\n      sidebarStyle.transition = \"none\";\n      sidebarStyle.WebkitTransition = \"none\";\n      contentStyle.transition = \"none\";\n      overlayStyle.transition = \"none\";\n    }\n\n    if (useTouch) {\n      if (this.props.open) {\n        rootProps.onTouchStart = this.onTouchStart;\n        rootProps.onTouchMove = this.onTouchMove;\n        rootProps.onTouchEnd = this.onTouchEnd;\n        rootProps.onTouchCancel = this.onTouchEnd;\n        rootProps.onScroll = this.onScroll;\n      } else {\n        const dragHandleStyle = { ...defaultStyles.dragHandle,\n          ...this.props.styles.dragHandle\n        };\n        dragHandleStyle.width = this.props.touchHandleWidth; // dragHandleStyle right/left\n\n        if (this.props.pullRight) {\n          dragHandleStyle.right = 0;\n        } else {\n          dragHandleStyle.left = 0;\n        }\n\n        dragHandle = /*#__PURE__*/React.createElement(\"div\", {\n          style: dragHandleStyle,\n          onTouchStart: this.onTouchStart,\n          onTouchMove: this.onTouchMove,\n          onTouchEnd: this.onTouchEnd,\n          onTouchCancel: this.onTouchEnd,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 11\n          }\n        });\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, rootProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.props.sidebarClassName,\n      style: sidebarStyle,\n      ref: this.saveSidebarRef,\n      id: this.props.sidebarId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }\n    }, this.props.sidebar), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.props.overlayClassName,\n      style: overlayStyle,\n      onClick: this.overlayClicked,\n      id: this.props.overlayId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.props.contentClassName,\n      style: contentStyle,\n      id: this.props.contentId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }\n    }, dragHandle, this.props.children));\n  }\n\n}\n\nSidebar.propTypes = {\n  // main content to render\n  children: PropTypes.node.isRequired,\n  // styles\n  styles: PropTypes.shape({\n    root: PropTypes.object,\n    sidebar: PropTypes.object,\n    content: PropTypes.object,\n    overlay: PropTypes.object,\n    dragHandle: PropTypes.object\n  }),\n  // root component optional class\n  rootClassName: PropTypes.string,\n  // sidebar optional class\n  sidebarClassName: PropTypes.string,\n  // content optional class\n  contentClassName: PropTypes.string,\n  // overlay optional class\n  overlayClassName: PropTypes.string,\n  // sidebar content to render\n  sidebar: PropTypes.node.isRequired,\n  // boolean if sidebar should be docked\n  docked: PropTypes.bool,\n  // boolean if sidebar should slide open\n  open: PropTypes.bool,\n  // boolean if transitions should be disabled\n  transitions: PropTypes.bool,\n  // boolean if touch gestures are enabled\n  touch: PropTypes.bool,\n  // max distance from the edge we can start touching\n  touchHandleWidth: PropTypes.number,\n  // Place the sidebar on the right\n  pullRight: PropTypes.bool,\n  // Enable/Disable sidebar shadow\n  shadow: PropTypes.bool,\n  // distance we have to drag the sidebar to toggle open state\n  dragToggleDistance: PropTypes.number,\n  // callback called when the overlay is clicked\n  onSetOpen: PropTypes.func,\n  // Initial sidebar width when page loads\n  defaultSidebarWidth: PropTypes.number,\n  // root component optional id\n  rootId: PropTypes.string,\n  // sidebar optional id\n  sidebarId: PropTypes.string,\n  // content optional id\n  contentId: PropTypes.string,\n  // overlay optional id\n  overlayId: PropTypes.string\n};\nSidebar.defaultProps = {\n  docked: false,\n  open: false,\n  transitions: true,\n  touch: true,\n  touchHandleWidth: 20,\n  pullRight: false,\n  shadow: true,\n  dragToggleDistance: 30,\n  onSetOpen: () => {},\n  styles: {},\n  defaultSidebarWidth: 0\n};\nexport default Sidebar;","map":{"version":3,"sources":["C:/Users/Nirmal.Bagdia/ppmcli/src/components/layout/Sidebar.js"],"names":["React","Component","PropTypes","CANCEL_DISTANCE_ON_SCROLL","defaultStyles","root","position","top","left","right","bottom","overflow","sidebar","zIndex","transition","WebkitTransition","willChange","overflowY","content","WebkitOverflowScrolling","overlay","opacity","visibility","backgroundColor","dragHandle","Sidebar","constructor","props","state","sidebarWidth","defaultSidebarWidth","touchIdentifier","touchStartX","touchCurrentX","dragSupported","overlayClicked","bind","onTouchStart","onTouchMove","onTouchEnd","onScroll","saveSidebarRef","componentDidMount","isIos","test","navigator","userAgent","setState","window","saveSidebarWidth","componentDidUpdate","isTouching","ev","touch","targetTouches","identifier","clientX","ind","length","touchWidth","touchSidebarWidth","open","dragToggleDistance","onSetOpen","inCancelDistanceOnScroll","cancelDistanceOnScroll","pullRight","Math","abs","width","offsetWidth","node","innerWidth","min","render","sidebarStyle","styles","contentStyle","overlayStyle","useTouch","rootProps","className","rootClassName","style","role","id","rootId","hasBoxShadow","shadow","docked","transform","WebkitTransform","boxShadow","percentage","transitions","onTouchCancel","dragHandleStyle","touchHandleWidth","sidebarClassName","sidebarId","overlayClassName","overlayId","contentClassName","contentId","children","propTypes","isRequired","shape","object","string","bool","number","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst CANCEL_DISTANCE_ON_SCROLL = 20;\n\nconst defaultStyles = {\n  root: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    overflow: \"hidden\"\n  },\n  sidebar: {\n    zIndex: 2,\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    transition: \"transform .3s ease-out\",\n    WebkitTransition: \"-webkit-transform .3s ease-out\",\n    willChange: \"transform\",\n    overflowY: \"auto\"\n  },\n  content: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    overflowY: \"auto\",\n    WebkitOverflowScrolling: \"touch\",\n    transition: \"left .3s ease-out, right .3s ease-out\"\n  },\n  overlay: {\n    zIndex: 1,\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    opacity: 0,\n    visibility: \"hidden\",\n    transition: \"opacity .3s ease-out, visibility .3s ease-out\",\n    backgroundColor: \"rgba(0,0,0,.3)\"\n  },\n  dragHandle: {\n    zIndex: 1,\n    position: \"fixed\",\n    top: 0,\n    bottom: 0\n  }\n};\n\nclass Sidebar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // the detected width of the sidebar in pixels\n      sidebarWidth: props.defaultSidebarWidth,\n\n      // keep track of touching params\n      touchIdentifier: null,\n      touchStartX: null,\n      touchCurrentX: null,\n\n      // if touch is supported by the browser\n      dragSupported: false\n    };\n\n    this.overlayClicked = this.overlayClicked.bind(this);\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.onTouchMove = this.onTouchMove.bind(this);\n    this.onTouchEnd = this.onTouchEnd.bind(this);\n    this.onScroll = this.onScroll.bind(this);\n    this.saveSidebarRef = this.saveSidebarRef.bind(this);\n  }\n\n  componentDidMount() {\n    const isIos = /iPad|iPhone|iPod/.test(navigator ? navigator.userAgent : \"\");\n    this.setState({\n      dragSupported:\n        typeof window === \"object\" && \"ontouchstart\" in window && !isIos\n    });\n    this.saveSidebarWidth();\n  }\n\n  componentDidUpdate() {\n    // filter out the updates when we're touching\n    if (!this.isTouching()) {\n      this.saveSidebarWidth();\n    }\n  }\n\n  onTouchStart(ev) {\n    // filter out if a user starts swiping with a second finger\n    if (!this.isTouching()) {\n      const touch = ev.targetTouches[0];\n      this.setState({\n        touchIdentifier: touch.identifier,\n        touchStartX: touch.clientX,\n        touchCurrentX: touch.clientX\n      });\n    }\n  }\n\n  onTouchMove(ev) {\n    if (this.isTouching()) {\n      for (let ind = 0; ind < ev.targetTouches.length; ind++) {\n        // we only care about the finger that we are tracking\n        if (ev.targetTouches[ind].identifier === this.state.touchIdentifier) {\n          this.setState({\n            touchCurrentX: ev.targetTouches[ind].clientX\n          });\n          break;\n        }\n      }\n    }\n  }\n\n  onTouchEnd() {\n    if (this.isTouching()) {\n      // trigger a change to open if sidebar has been dragged beyond dragToggleDistance\n      const touchWidth = this.touchSidebarWidth();\n\n      if (\n        (this.props.open &&\n          touchWidth <\n            this.state.sidebarWidth - this.props.dragToggleDistance) ||\n        (!this.props.open && touchWidth > this.props.dragToggleDistance)\n      ) {\n        this.props.onSetOpen(!this.props.open);\n      }\n\n      this.setState({\n        touchIdentifier: null,\n        touchStartX: null,\n        touchCurrentX: null\n      });\n    }\n  }\n\n  // This logic helps us prevents the user from sliding the sidebar horizontally\n  // while scrolling the sidebar vertically. When a scroll event comes in, we're\n  // cancelling the ongoing gesture if it did not move horizontally much.\n  onScroll() {\n    if (this.isTouching() && this.inCancelDistanceOnScroll()) {\n      this.setState({\n        touchIdentifier: null,\n        touchStartX: null,\n        touchCurrentX: null\n      });\n    }\n  }\n\n  // True if the on going gesture X distance is less than the cancel distance\n  inCancelDistanceOnScroll() {\n    let cancelDistanceOnScroll;\n\n    if (this.props.pullRight) {\n      cancelDistanceOnScroll =\n        Math.abs(this.state.touchCurrentX - this.state.touchStartX) <\n        CANCEL_DISTANCE_ON_SCROLL;\n    } else {\n      cancelDistanceOnScroll =\n        Math.abs(this.state.touchStartX - this.state.touchCurrentX) <\n        CANCEL_DISTANCE_ON_SCROLL;\n    }\n    return cancelDistanceOnScroll;\n  }\n\n  isTouching() {\n    return this.state.touchIdentifier !== null;\n  }\n\n  overlayClicked() {\n    if (this.props.open) {\n      this.props.onSetOpen(false);\n    }\n  }\n\n  saveSidebarWidth() {\n    const width = this.sidebar.offsetWidth;\n\n    if (width !== this.state.sidebarWidth) {\n      this.setState({ sidebarWidth: width });\n    }\n  }\n\n  saveSidebarRef(node) {\n    this.sidebar = node;\n  }\n\n  // calculate the sidebarWidth based on current touch info\n  touchSidebarWidth() {\n    // if the sidebar is open and start point of drag is inside the sidebar\n    // we will only drag the distance they moved their finger\n    // otherwise we will move the sidebar to be below the finger.\n    if (this.props.pullRight) {\n      if (\n        this.props.open &&\n        window.innerWidth - this.state.touchStartX < this.state.sidebarWidth\n      ) {\n        if (this.state.touchCurrentX > this.state.touchStartX) {\n          return (\n            this.state.sidebarWidth +\n            this.state.touchStartX -\n            this.state.touchCurrentX\n          );\n        }\n        return this.state.sidebarWidth;\n      }\n      return Math.min(\n        window.innerWidth - this.state.touchCurrentX,\n        this.state.sidebarWidth\n      );\n    }\n\n    if (this.props.open && this.state.touchStartX < this.state.sidebarWidth) {\n      if (this.state.touchCurrentX > this.state.touchStartX) {\n        return this.state.sidebarWidth;\n      }\n      return (\n        this.state.sidebarWidth -\n        this.state.touchStartX +\n        this.state.touchCurrentX\n      );\n    }\n    return Math.min(this.state.touchCurrentX, this.state.sidebarWidth);\n  }\n\n  render() {\n    const sidebarStyle = {\n      ...defaultStyles.sidebar,\n      ...this.props.styles.sidebar\n    };\n    const contentStyle = {\n      ...defaultStyles.content,\n      ...this.props.styles.content\n    };\n    const overlayStyle = {\n      ...defaultStyles.overlay,\n      ...this.props.styles.overlay\n    };\n    const useTouch = this.state.dragSupported && this.props.touch;\n    const isTouching = this.isTouching();\n    const rootProps = {\n      className: this.props.rootClassName,\n      style: { ...defaultStyles.root, ...this.props.styles.root },\n      role: \"navigation\",\n      id: this.props.rootId\n    };\n    let dragHandle;\n\n    const hasBoxShadow =\n      this.props.shadow && (isTouching || this.props.open || this.props.docked);\n    // sidebarStyle right/left\n    if (this.props.pullRight) {\n      sidebarStyle.right = 0;\n      sidebarStyle.transform = \"translateX(100%)\";\n      sidebarStyle.WebkitTransform = \"translateX(100%)\";\n      if (hasBoxShadow) {\n        sidebarStyle.boxShadow = \"-2px 2px 4px rgba(0, 0, 0, 0.15)\";\n      }\n    } else {\n      sidebarStyle.left = 0;\n      sidebarStyle.transform = \"translateX(-100%)\";\n      sidebarStyle.WebkitTransform = \"translateX(-100%)\";\n      if (hasBoxShadow) {\n        sidebarStyle.boxShadow = \"2px 2px 4px rgba(0, 0, 0, 0.15)\";\n      }\n    }\n\n    if (isTouching) {\n      const percentage = this.touchSidebarWidth() / this.state.sidebarWidth;\n\n      // slide open to what we dragged\n      if (this.props.pullRight) {\n        sidebarStyle.transform = `translateX(${(1 - percentage) * 100}%)`;\n        sidebarStyle.WebkitTransform = `translateX(${(1 - percentage) * 100}%)`;\n      } else {\n        sidebarStyle.transform = `translateX(-${(1 - percentage) * 100}%)`;\n        sidebarStyle.WebkitTransform = `translateX(-${(1 - percentage) *\n          100}%)`;\n      }\n\n      // fade overlay to match distance of drag\n      overlayStyle.opacity = percentage;\n      overlayStyle.visibility = \"visible\";\n    } else if (this.props.docked) {\n      // show sidebar\n      if (this.state.sidebarWidth !== 0) {\n        sidebarStyle.transform = `translateX(0%)`;\n        sidebarStyle.WebkitTransform = `translateX(0%)`;\n      }\n\n      // make space on the left/right side of the content for the sidebar\n      if (this.props.pullRight) {\n        contentStyle.right = `${this.state.sidebarWidth}px`;\n      } else {\n        contentStyle.left = `${this.state.sidebarWidth}px`;\n      }\n    } else if (this.props.open) {\n      // slide open sidebar\n      sidebarStyle.transform = `translateX(0%)`;\n      sidebarStyle.WebkitTransform = `translateX(0%)`;\n\n      // show overlay\n      overlayStyle.opacity = 1;\n      overlayStyle.visibility = \"visible\";\n    }\n\n    if (isTouching || !this.props.transitions) {\n      sidebarStyle.transition = \"none\";\n      sidebarStyle.WebkitTransition = \"none\";\n      contentStyle.transition = \"none\";\n      overlayStyle.transition = \"none\";\n    }\n\n    if (useTouch) {\n      if (this.props.open) {\n        rootProps.onTouchStart = this.onTouchStart;\n        rootProps.onTouchMove = this.onTouchMove;\n        rootProps.onTouchEnd = this.onTouchEnd;\n        rootProps.onTouchCancel = this.onTouchEnd;\n        rootProps.onScroll = this.onScroll;\n      } else {\n        const dragHandleStyle = {\n          ...defaultStyles.dragHandle,\n          ...this.props.styles.dragHandle\n        };\n        dragHandleStyle.width = this.props.touchHandleWidth;\n\n        // dragHandleStyle right/left\n        if (this.props.pullRight) {\n          dragHandleStyle.right = 0;\n        } else {\n          dragHandleStyle.left = 0;\n        }\n\n        dragHandle = (\n          <div\n            style={dragHandleStyle}\n            onTouchStart={this.onTouchStart}\n            onTouchMove={this.onTouchMove}\n            onTouchEnd={this.onTouchEnd}\n            onTouchCancel={this.onTouchEnd}\n          />\n        );\n      }\n    }\n\n    return (\n      <div {...rootProps}>\n        <div\n          className={this.props.sidebarClassName}\n          style={sidebarStyle}\n          ref={this.saveSidebarRef}\n          id={this.props.sidebarId}\n        >\n          {this.props.sidebar}\n        </div>\n        {/* eslint-disable */}\n        <div\n          className={this.props.overlayClassName}\n          style={overlayStyle}\n          onClick={this.overlayClicked}\n          id={this.props.overlayId}\n        />\n        {/* eslint-enable */}\n        <div\n          className={this.props.contentClassName}\n          style={contentStyle}\n          id={this.props.contentId}\n        >\n          {dragHandle}\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n}\n\nSidebar.propTypes = {\n  // main content to render\n  children: PropTypes.node.isRequired,\n\n  // styles\n  styles: PropTypes.shape({\n    root: PropTypes.object,\n    sidebar: PropTypes.object,\n    content: PropTypes.object,\n    overlay: PropTypes.object,\n    dragHandle: PropTypes.object\n  }),\n\n  // root component optional class\n  rootClassName: PropTypes.string,\n\n  // sidebar optional class\n  sidebarClassName: PropTypes.string,\n\n  // content optional class\n  contentClassName: PropTypes.string,\n\n  // overlay optional class\n  overlayClassName: PropTypes.string,\n\n  // sidebar content to render\n  sidebar: PropTypes.node.isRequired,\n\n  // boolean if sidebar should be docked\n  docked: PropTypes.bool,\n\n  // boolean if sidebar should slide open\n  open: PropTypes.bool,\n\n  // boolean if transitions should be disabled\n  transitions: PropTypes.bool,\n\n  // boolean if touch gestures are enabled\n  touch: PropTypes.bool,\n\n  // max distance from the edge we can start touching\n  touchHandleWidth: PropTypes.number,\n\n  // Place the sidebar on the right\n  pullRight: PropTypes.bool,\n\n  // Enable/Disable sidebar shadow\n  shadow: PropTypes.bool,\n\n  // distance we have to drag the sidebar to toggle open state\n  dragToggleDistance: PropTypes.number,\n\n  // callback called when the overlay is clicked\n  onSetOpen: PropTypes.func,\n\n  // Initial sidebar width when page loads\n  defaultSidebarWidth: PropTypes.number,\n\n  // root component optional id\n  rootId: PropTypes.string,\n\n  // sidebar optional id\n  sidebarId: PropTypes.string,\n\n  // content optional id\n  contentId: PropTypes.string,\n\n  // overlay optional id\n  overlayId: PropTypes.string\n};\n\nSidebar.defaultProps = {\n  docked: false,\n  open: false,\n  transitions: true,\n  touch: true,\n  touchHandleWidth: 20,\n  pullRight: false,\n  shadow: true,\n  dragToggleDistance: 30,\n  onSetOpen: () => {},\n  styles: {},\n  defaultSidebarWidth: 0\n};\n\nexport default Sidebar;\n"]},"metadata":{},"sourceType":"module"}